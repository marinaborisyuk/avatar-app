import Head from 'next/head';
import {useState} from 'react';
import styles from '@/styles/Home.module.css';
import CardGrid from '@/components/CardGrid/CardGrid';
import LoadingSpinner from '@/components/LoadingSpinner/LoadingSpinner';
import AddCardBtn from '@/components/AddCardBtn/AddCardBtn';
import RefreshAllBtn from '@/components/RefreshAllBtn/RefreshAllBtn';
import {CardService} from '@/services/card.service';

export default function Home({cards = []}) {
  const [avatars, setAvatars] = useState(cards);
  const [isLoading, setIsLoading] = useState(false);

  const uploadAvatar = async quantity => {
    if (isLoading) return;

    !quantity && setIsLoading(true);
    const data = await CardService.getAll(quantity);

    data &&
      (quantity && data
        ? setAvatars([...data])
        : setAvatars(avatars => [...avatars, ...data]));

    setIsLoading(false);
  };

  const refresh = async replacedId => {
    if (isLoading) return;

    const newCard = await CardService.getOneRandomCard();
    if (newCard) {
      // const refreshedAvatars =
      setAvatars([
        ...avatars.map(avatar =>
          replacedId === avatar.id && replacedId != newCard.id
            ? newCard
            : avatar,
        ),
      ]);
    }
    console.log(newCard, 'card');
  };

  const avatarsData = {
    avatars: avatars,
    isLoading: isLoading,
    refreshAvatar: refresh,
  };

  return (
    <>
      <Head>
        <title>Avatar App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className={styles.container}>
        <div className={styles.grid}>
          <CardGrid avatarsData={avatarsData} />
          {isLoading && <LoadingSpinner />}
          <AddCardBtn addCard={() => uploadAvatar()} />
        </div>
        <RefreshAllBtn refreshAll={() => uploadAvatar(avatars.length)} />
      </main>
    </>
  );
}

export const getServerSideProps = async () => {
  const cards = await CardService.getAll(5);
  return {
    props: cards ? {cards} : {},
  };
};
